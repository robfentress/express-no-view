
Apex 4X is a comprehensive ARIA development suite, including a core collection of powerful ARIA development utilities and functions, plus a full index of scalable ARIA design pattern templates. It also includes two APIs that are specifically designed to enhance and facilitate advanced ARIA development.

The $A API provides all core functionality, including dynamic modularization for swappable components, advanced ARIA development features and processes, data management, DOM related methods and processes, dynamic import methods, visual effect methods for content display and animation, and chaining.

The DC (Dynamic Component) API provides  direct access to individually configurable components and widgets. Each DC instance includes the ability to control dynamic behaviors, manage content and events, utilize lifecycle methods, pass custom props between other DC instances and external resources, control rendering processes, plus manage visual effects and animation.

Usage
-----

# Place the 4X folder at the root of your website directory. The 4X folder should then be accessible from "www.YourDomain.com/4X".
# Add the following script statement within the head of your page: `<script type="text/javascript" src="/4X/4X.js"></script>`

After which, all of the $A API features will be available, including the full suite of ARIA development processes. These are fully documented within the help docs folder at: "Help/ARIA Development"

The default server location can be changed by modifying the "moduleFolder" property within 4X.js if needed.

In contrast, the DC API is only applicable when creating DC object instances for the configuring of dynamic components.

Any DOM element or markup string can be turned into a DC object using the following syntax:

```
var DC = $A.toDC(domElement, {
  // Optional DC API properties and methods here.
});
```

Or even the following:

```
// Fetch an external control and convert it into a DC object to render with behavior declarations.
var DC = $A.toDC("path/resource.php?params#ExternalElementId", {
  root: 'body',
  append: true,
  forceFocus: true,
  afterRender: function(DC) {
    // Do something.
  }
});
```

After which, all DC API properties and methods will be available for that object.

For help regarding this, view the documentation at: 
"Help/$A API/DC Objects/", and 
"Help/DC API".
